# -*- coding: utf-8 -*-
"""Antonio Sant Ana de Oliveira - exercise_vector_matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d80vT21rV3bJl1KU-OyCw6lIxvVs-mFc
"""

import numpy as np
import scipy
from math import *

"""Create the vectors:

p = [3.5,1,0.8,9]

q = [2,4,8,0]

"""

p = np.array([3.5,1,0.8,9])
q = np.array([2,4,8,0])
print('p = \n',p)
print('q = ',q)

print(p.dtype)
print(q.dtype)

"""Now, do the operations:

v = p + q

a = p(4th element) + q(2nd element)

b = p(1st element:3rd element)

w = [p,q] (concatenate p and q)
"""

v= p + q
print('v=',v)

a = p[3] + q[1]
print('a=',a)

b = p[0:3]
print('b=',b)


w = np.hstack((p,q))
print('w=',w)

"""Create and do the following operations

M = matrix(4x6) of ones

M2 = 2 x M

Change the second line of M2 to  [2,1,4.5,0,9.3,7]

M3 = transpose M2
"""

M = np.ones((4,6))
print('M =\n', M)

M2 = 2*M
print('M2 = \n', M2)

M2[1] = [2,1,4.5,0,9.3,7]
print('M2 = \n', M2)

M3 = np.transpose(M2)
print('M3 = \n', M3)

"""Create the following matrices and do the operations:

>
$T = \begin{bmatrix}
1 & 0 & 0  & 4 \\
0 & 1 & 0  & -1 \\
0 & 0  & 1  & 3 \\
0 & 0 & 0  & 1 \\
\end{bmatrix}$

$R = \begin{bmatrix}
cos(90) & -sen(90) & 0  & 0 \\
sen(90) & cos(90) & 0  & 0 \\
0 & 0  & 1  & 0 \\
0 & 0 & 0  & 1 \\
\end{bmatrix}$

$v1 = [1,0,0,0]^T$

$p = [1,3,0,1]^T$

$obj = \begin{bmatrix}
0 & 1 & 1  & 0 \\
0 & 0 & 1  & 1 \\
0 & 0 & 0  & 0 \\
1 & 1 & 1  & 1 \\
\end{bmatrix}$

$p1 = T.p$

$v2 = T.v1$

$v3 = R.v1$

$M1 = T.R$

$M2 = R.T$

$obj1 = T.obj$

$obj2 = M1.obj$

$obj3 = M2.obj$




"""

# Using cos, sin and pi from numpy

c = np.cos(np.pi/2)
s = np.sin(np.pi/2)

print(c)
print(s)


### Setting printing options
np.set_printoptions(formatter={'float': lambda x: "{0:0.3f}".format(x)})
np.set_printoptions(precision=3,suppress=True)


# Using cos, sin and pi from the math library

from math import cos, sin, pi

c = cos(pi/2)
s = sin(pi/2)

print(c)
print(s)

# Create T
T = np.array([[1,0,0,4],[0,1,0,-1],[0,0,1,3],[0,0,0,1]])
print(T)

# Create R
ang = pi/2

R = np.array([[cos(ang),-sin(ang),0,0],[sin(ang),cos(ang),0,0],[0,0,1,0],[0,0,0,1]])
print(R)

# Create v1, p and object
#Different ways of creating a column vector
v0 = np.array([[1],[0],[0],[0]])
v1 = np.array([1,0,0,0]).reshape(-1,1)

p = np.transpose(np.array([1,3,0,1]))
obj = np.array([[0,1,1,0],[0,0,1,1],[0,0,0,0],[1,1,1,1]])



print('Vector v1:\n', v1)
print('Point p:\n', p)
print('Object:\n', obj)

# Translate p
p1 = T@p
print('Translated p:\n', p1)

# Rotate p
p2 = R@p
print('Rotated p:\n', p2)

# Translate v1
v2 = T@v1
print('Translated v1:\n', v2)

# Rotate v1
v3 = R@v1
print('Rotated v1:\n', v3)

# Create transforamations M1 and M2
M1 = T@R
M2 = R@T
print('Matrix M1:\n', M1)
print('Matrix M2:\n', M2)

# Change the object
obj1 = T@obj
obj2 = M1@obj
obj3 = M2@obj

print('Object:\n', obj)
print('Translated Object:\n', obj1)
print('Transformed Object by M1:\n', obj2)
print('Transformed Object by M2:\n', obj3)